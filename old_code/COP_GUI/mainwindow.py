# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import matplotlib
matplotlib.use("Agg")

import kivy
from kivy.lang import Builder

import led_indicator

import random
from itertools import count
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import numpy as np

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QMessageBox
from PyQt5.QtCore import QRect
from PyQt5.QtGui import QPainter
from custom_widgets import mic_plot
import numpy as np
import time
#from physical_tasks import physical_task_functions
#from cognitive_tasks import cognitive_task_functions
import sys

sys.path.append('./physical_tasks')
sys.path.append('./cognitive_tasks')
import cognitive_task_functions
import physical_task_functions

from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
from random import randint

class plotting_widget_o2sat(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_o2sat, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        # self.y.append(update_y) #add a new value to y
        self.y = update_y
        self.x = list(range(update_y.size))


        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.biosignalplux.MyDevice.return_logged_data()
        return dataArr[:,5]

class plotting_widget_breath(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_breath, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        # self.y.append(update_y) #add a new value to y
        self.y = update_y
        self.x = list(range(update_y.size))

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.biosignalplux.MyDevice.return_logged_data()
        return dataArr[:,2]

class plotting_widget_ecg(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_ecg, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        # self.y.append(update_y) #add a new value to y
        self.y = update_y
        self.x = list(range(update_y.size))
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.biosignalplux.MyDevice.return_logged_data()
        return dataArr[:,0]

class plotting_widget_heartRate(QtWidgets.QWidget):
    #This is actually O2Sat_IR but refactoring the entire UI just to change the label is dumb when I can just reset the window title.
    def __init__(self, parent=None):
        super(plotting_widget_heartRate, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        # self.y.append(update_y) #add a new value to y
        self.y = update_y
        self.x = list(range(update_y.size))
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.biosignalplux.MyDevice.return_logged_data()
        return dataArr[:,4]

class plotting_widget_conductivity(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_conductivity, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        # self.y.append(update_y) #add a new value to y
        self.y = update_y
        self.x = list(range(update_y.size))
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.biosignalplux.MyDevice.return_logged_data()
        return dataArr[:,1]

class plotting_widget_mic1(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_mic1, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        self.y.append(update_y) #add a new value to y
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.microphone.sound
        return dataArr[0][-1]

class plotting_widget_mic2(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_mic2, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        self.y.append(update_y) #add a new value to y
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.microphone.sound
        return dataArr[1][-1]

class plotting_widget_mic3(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_mic3, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        self.y.append(update_y) #add a new value to y
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.microphone.sound
        return dataArr[2][-1]

class plotting_widget_mic4(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(plotting_widget_mic4, self).__init__(parent)
        self.graphWidget = pg.PlotWidget()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graphWidget)

        self.setLayout(layout)

        self.x = list(range(100))
        self.y = [0] * 100

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255,0,0))
        self.data_line = self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):

        self.x = self.x[1:] #Remove the first x element
        self.x.append(self.x[-1] +1) #add new value 1 higher than previous highest values

        self.y = self.y[1:] #Remove the first element of y
        update_y = self.get_update()
        self.y.append(update_y) #add a new value to y
        print(self.y)

        self.data_line.setData(self.x, self.y)

    def get_update(self):

        dataArr = physical_task_functions.microphone.sound
        return dataArr[3][-1]

class Window(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.main_window = Ui_MainWindow()

class Old_Ui_MainWindow(object):

    subject_number = -1
    session_number = -1
    killFlag = 0
    path = ""
    #tPlux = physical_task_functions.myThreads(3, "Plux")
    #tMic = physical_task_functions.myThreads(1,"Mic")
    #tPlux.start()
    #tMic.start()


    #plux_file.write("{0},{1},{2},{3},{4},{5},{6}\n".format('Time', 'ECG', 'GSR', 'Breathing', 'EMG', 'PulOxR', 'PulOxIR'))

    def create_acknowledge_popup(self, message):
        msg = QMessageBox()
        msg.setWindowTitle("Attention!")
        msg.setText(message)
        x = msg.exec_()

    def create_timed_popup(self, message, seconds):
        pass

    def create_breath_plot(self):
        if self.breath_checkbox.isChecked():
            self.wBreath = plotting_widget_breath()
            self.wBreath.setWindowTitle("Breathing Band Output")
            self.wBreath.show()
        else:
            self.wBreath.close()

    def create_o2sat_plot(self):
        if self.o2sat_checkbox.isChecked():
            self.wo2sat = plotting_widget_o2sat()
            self.wo2sat.setWindowTitle("O2Sat_R Output")
            self.wo2sat.show()
        else:
            self.wo2sat.close()

    def create_ecg_plot(self):
        if self.ecg_checkbox.isChecked():
            self.wecg = plotting_widget_ecg()
            self.wecg.setWindowTitle("ECG Output")
            self.wecg.show()
        else:
            self.wecg.close()

    def create_hr_plot(self):
        if self.hr_checkbox.isChecked():
            self.whr = plotting_widget_heartRate()
            self.whr.setWindowTitle("O2Sat_IR Output")
            self.whr.show()
        else:
            self.whr.close()

    def create_conductivity_plot(self):
        if self.conductivity_checkbox.isChecked():
            self.wconductivity = plotting_widget_conductivity()
            self.wconductivity.setWindowTitle("GSR Output")
            self.wconductivity.show()
        else:
            self.wconductivity.close()

    def create_mic1_plot(self):
        if self.mic1_checkbox.isChecked():
            self.w1 = plotting_widget_mic1()
            self.w1.setWindowTitle("Microphone 1 Output")
            self.w1.show()
        else:
            self.w1.close()

    def create_mic2_plot(self):
        if self.mic2_checkbox.isChecked():
            self.w2 = plotting_widget_mic2()
            self.w2.setWindowTitle("Microphone 2 Output")
            self.w2.show()
        else:
            self.w2.close()

    def create_mic3_plot(self):
        if self.mic3_checkbox.isChecked():
            self.w3 = plotting_widget_mic3()
            self.w3.setWindowTitle("Microphone 3 Output")
            self.w3.show()
        else:
            self.w3.close()

    def create_mic4_plot(self):
        if self.mic4_checkbox.isChecked():
            self.w4 = plotting_widget_mic4()
            self.w4.setWindowTitle("Microphone 4 Output")
            self.w4.show()
        else:
            self.w4.close()

    def update_subject_details(self):
        self.subject_number = self.subject_number_spinbox.value()
        self.session_number = self.session_number_spinbox.value()
        self.path = physical_task_functions.newDirectory(self.subject_number, self.session_number)

    def start_physical_tasks(self):
        print("Starting COPD Physical Task Procedures...")
        self.create_acknowledge_popup("Please press okay when you are ready to begin!")
        self.tPlux.start_sensor(self.path)
        if(physical_task_functions.microphone.rec == True):
            self.tMic.start_sensor(self.path)
        else:
            self.tMic.rec = True
            self.tMic.start_sensor(self.path)

    def stop_physical_task(self, killFlag):
        if(killFlag == -1):
            #tailor kill for failed Plux connection
            self.create_acknowledge_popup("Failed to connect to Plux. Please check connection and try again!")
            return
        self.tPlux.pause_sensor()

        self.tMic.close_sensor()

        self.create_acknowledge_popup("The physical task was stopped early by user.")

    def start_cognitive_task(self):
        cognitive_task_functions.bigBrainTime.start_cognitive_task("v", self.path)

    def stop_cognitive_task(self, killFlag):
        if(killFlag == -1):
            print("Whoopsie!")
            pass
        print("Pew pew!")





    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(350, 606)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.frame = QtWidgets.QFrame(self.tab_3)
        self.frame.setGeometry(QtCore.QRect(10, 9, 350, 212))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.textBrowser = QtWidgets.QTextBrowser(self.frame)
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout_5.addWidget(self.textBrowser, 0, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox.setGeometry(QtCore.QRect(10, 220, 310, 290))
        self.groupBox.setObjectName("groupBox")
        self.mic1_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic1_checkbox.setGeometry(QtCore.QRect(60, 40, 92, 23))
        self.mic1_checkbox.setObjectName("mic1_checkbox")

        self.pFatigue_indicator = led_indicator.LedIndicator()
        self.cFatigue_indicator = led_indicator.LedIndicator()

        self.gridLayout_5.addWidget(self.pFatigue_indicator, 9, 0, 1, 1)

        self.mic1_checkbox.stateChanged.connect(self.create_mic1_plot)

        self.mic2_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic2_checkbox.setGeometry(QtCore.QRect(60, 70, 92, 23))
        self.mic2_checkbox.setObjectName("mic2_checkbox")

        self.mic2_checkbox.stateChanged.connect(self.create_mic2_plot)

        self.mic3_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic3_checkbox.setGeometry(QtCore.QRect(60, 100, 92, 23))
        self.mic3_checkbox.setObjectName("mic3_checkbox")

        self.mic3_checkbox.stateChanged.connect(self.create_mic3_plot)

        self.mic4_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic4_checkbox.setGeometry(QtCore.QRect(60, 130, 92, 23))
        self.mic4_checkbox.setObjectName("mic4_checkbox")

        self.mic4_checkbox.stateChanged.connect(self.create_mic4_plot)

        self.o2sat_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.o2sat_checkbox.setGeometry(QtCore.QRect(180, 130, 92, 23))
        self.o2sat_checkbox.setObjectName("o2sat_checkbox")

        self.o2sat_checkbox.stateChanged.connect(self.create_o2sat_plot)

        self.ecg_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.ecg_checkbox.setGeometry(QtCore.QRect(180, 100, 92, 23))
        self.ecg_checkbox.setObjectName("ecg_checkbox")

        self.ecg_checkbox.stateChanged.connect(self.create_ecg_plot)

        self.conductivity_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.conductivity_checkbox.setGeometry(QtCore.QRect(180, 70, 110, 23))
        self.conductivity_checkbox.setObjectName("conductivity_checkbox")

        self.conductivity_checkbox.stateChanged.connect(self.create_conductivity_plot)

        self.breath_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.breath_checkbox.setGeometry(QtCore.QRect(60, 160, 92, 23))
        self.breath_checkbox.setObjectName("breath_checkbox")

        self.breath_checkbox.stateChanged.connect(self.create_breath_plot)

        self.hr_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.hr_checkbox.setGeometry(QtCore.QRect(180, 40, 92, 23))
        self.hr_checkbox.setObjectName("hr_checkbox")

        self.hr_checkbox.stateChanged.connect(self.create_hr_plot)

        self.subject_number_spinbox = QtWidgets.QSpinBox(self.groupBox)
        self.subject_number_spinbox.setGeometry(QtCore.QRect(20, 210, 44, 26))
        self.subject_number_spinbox.setObjectName("subject_number")
        self.session_number_spinbox = QtWidgets.QSpinBox(self.groupBox)
        self.session_number_spinbox.setGeometry(QtCore.QRect(20, 240, 44, 26))
        self.session_number_spinbox.setObjectName("session_number")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(70, 210, 120, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(70, 240, 120, 20))
        self.label_2.setObjectName("label_2")

        self.update_button = QtWidgets.QPushButton(self.groupBox)
        self.update_button.setGeometry(QtCore.QRect(200, 220, 89, 30))
        self.update_button.setObjectName("update_button")

        self.update_button.clicked.connect(self.update_subject_details)

        self.tabWidget.addTab(self.tab_3, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.frame_2 = QtWidgets.QFrame(self.tab)
        self.frame_2.setGeometry(QtCore.QRect(10, 10, 310, 330))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.frame_2)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.gridLayout_6.addWidget(self.textBrowser_2, 0, 0, 1, 1)
        self.physical_task_start = QtWidgets.QPushButton(self.tab)
        self.physical_task_start.setGeometry(QtCore.QRect(10, 350, 310, 80))
        self.physical_task_start.setObjectName("physical_task_start")

        self.physical_task_start.clicked.connect(self.start_physical_tasks)

        self.physical_task_stop = QtWidgets.QPushButton(self.tab)
        self.physical_task_stop.setGeometry(QtCore.QRect(10, 440, 310, 80))
        self.physical_task_stop.setObjectName("physical_task_stop")

        self.physical_task_stop.clicked.connect(self.stop_physical_task)

        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.frame_3 = QtWidgets.QFrame(self.tab_2)
        self.frame_3.setGeometry(QtCore.QRect(10, 10, 310, 330))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.frame_3)
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.gridLayout_7.addWidget(self.textBrowser_3, 0, 0, 1, 1)
        self.cognitive_task_start = QtWidgets.QPushButton(self.tab_2)
        self.cognitive_task_start.setGeometry(QtCore.QRect(10, 350, 310, 80))
        self.cognitive_task_start.setObjectName("cognitive_task_start")

        self.cognitive_task_start.clicked.connect(self.start_cognitive_task)

        self.cognitive_task_stop = QtWidgets.QPushButton(self.tab_2)
        self.cognitive_task_stop.setGeometry(QtCore.QRect(10, 440, 310, 80))
        self.cognitive_task_stop.setObjectName("cognitive_task_stop")

        self.cognitive_task_stop.clicked.connect(self.stop_cognitive_task)

        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Welcome to the COPD Framework Graphical User Interface!</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Please be sure to specify your subject number and session number in the spin boxes below, and then press the update button!</span></p></body></html>"))
        self.groupBox.setTitle(_translate("MainWindow", "Sensor Outputs"))
        self.mic1_checkbox.setText(_translate("MainWindow", "Mic 1"))
        self.mic2_checkbox.setText(_translate("MainWindow", "Mic 2"))
        self.mic3_checkbox.setText(_translate("MainWindow", "Mic 3"))
        self.mic4_checkbox.setText(_translate("MainWindow", "Mic 4"))
        self.o2sat_checkbox.setText(_translate("MainWindow", "O2Sat_IR"))
        self.ecg_checkbox.setText(_translate("MainWindow", "ECG"))
        self.conductivity_checkbox.setText(_translate("MainWindow", "Conductivity"))
        self.hr_checkbox.setText(_translate("MainWindow", "O2Sat_R"))
        self.label.setText(_translate("MainWindow", "Subject Number"))
        self.label_2.setText(_translate("MainWindow", "Session Number"))
        self.breath_checkbox.setText(_translate("MainWindow", "Breath"))
        self.update_button.setText(_translate("MainWindow", "Update"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Splash"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The physical task will begin with a baseline reading for 1.5 minutes. <br /><br />Next, the treadmill will be started at an initial incline and speed for 3 minutes. </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Next, the incline and speed will be increased to a higher difficulty for 3 additional minutes.<br /><br />Finally, a post reading will be taken.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Press the &quot;Start!&quot; button to begin. Popup windows will appear to prompt each phase of the task.</p></body></html>"))
        self.physical_task_start.setText(_translate("MainWindow", "Start"))
        self.physical_task_stop.setText(_translate("MainWindow", "Stop"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Physcial Tasks"))
        self.textBrowser_3.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Cognitive tasks will consist of several n-back challenges. Please set the values according to the following schema:<br /><br />If this is your first session, you will complete two 0-back challenges before the physical task. After the physical task, you will complete 6 2-back challenges. </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Please set the n-back spinbox to either 0 or 2 according to the above.<br />Please also update the challenge number spinbox for each challenge you undertake.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Good luck user!</p></body></html>"))
        self.cognitive_task_start.setText(_translate("MainWindow", "Start"))
        self.cognitive_task_stop.setText(_translate("MainWindow", "Stop"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Cognitive Tasks"))
        self.actionClose.setText(_translate("MainWindow", "Close"))

class Ui_MainWindow(object):

    subject_number = -1
    session_number = -1
    killFlag = 0
    path = ""
    tPlux = physical_task_functions.myThreads(3, "Plux")
    tMic = physical_task_functions.myThreads(1,"Mic")
    tPlux.start()
    tMic.start()

    def create_acknowledge_popup(self, message):
        msg = QMessageBox()
        msg.setWindowTitle("Attention!")
        msg.setText(message)
        x = msg.exec_()

    def create_timed_popup(self, message, seconds):
        pass

    def create_breath_plot(self):
        if self.breath_checkbox.isChecked():
            self.wBreath = plotting_widget_breath()
            self.wBreath.setWindowTitle("Breathing Band Output")
            self.wBreath.show()
        else:
            self.wBreath.close()

    def create_o2sat_r_plot(self):
        if self.o2sat_r_checkbox.isChecked():
            self.wo2sat = plotting_widget_o2sat()
            self.wo2sat.setWindowTitle("O2Sat_R Output")
            self.wo2sat.show()
        else:
            self.wo2sat.close()

    def create_ecg_plot(self):
        if self.ecg_checkbox.isChecked():
            self.wecg = plotting_widget_ecg()
            self.wecg.setWindowTitle("ECG Output")
            self.wecg.show()
        else:
            self.wecg.close()

    def create_o2sat_ir_plot(self):
        if self.o2sat_ir_checkbox_2.isChecked():
            self.whr = plotting_widget_heartRate()
            self.whr.setWindowTitle("O2Sat_IR Output")
            self.whr.show()
        else:
            self.whr.close()

    def create_gsr_plot(self):
        if self.gsr_checkbox.isChecked():
            self.wconductivity = plotting_widget_conductivity()
            self.wconductivity.setWindowTitle("GSR Output")
            self.wconductivity.show()
        else:
            self.wconductivity.close()

    def create_mic1_plot(self):
        if self.mic1_checkbox.isChecked():
            self.w1 = plotting_widget_mic1()
            self.w1.setWindowTitle("Microphone 1 Output")
            self.w1.show()
        else:
            self.w1.close()

    def create_mic2_plot(self):
        if self.mic2_checkbox.isChecked():
            self.w2 = plotting_widget_mic2()
            self.w2.setWindowTitle("Microphone 2 Output")
            self.w2.show()
        else:
            self.w2.close()

    def create_mic3_plot(self):
        if self.mic3_checkbox.isChecked():
            self.w3 = plotting_widget_mic3()
            self.w3.setWindowTitle("Microphone 3 Output")
            self.w3.show()
        else:
            self.w3.close()

    def create_mic4_plot(self):
        if self.mic4_checkbox.isChecked():
            self.w4 = plotting_widget_mic4()
            self.w4.setWindowTitle("Microphone 4 Output")
            self.w4.show()
        else:
            self.w4.close()

    def update_subject_details(self):
        self.subject_number = self.subject_spinbox.value()
        self.session_number = self.session_spinbox.value()
        self.path = physical_task_functions.newDirectory(self.subject_number, self.session_number)

    def start_physical_tasks(self):
        print("Starting COPD Physical Task Procedures...")
        self.create_acknowledge_popup("Please press okay when you are ready to begin!")
        self.tPlux.start_sensor(self.path)
        if(physical_task_functions.microphone.rec == True):
            self.tMic.start_sensor(self.path)
        else:
            self.tMic.rec = True
            self.tMic.start_sensor(self.path)

    def stop_physical_task(self, killFlag):
        if(killFlag == -1):
            #tailor kill for failed Plux connection
            self.create_acknowledge_popup("Failed to connect to Plux. Please check connection and try again!")
            return
        self.tPlux.pause_sensor()

        self.tMic.close_sensor()

        self.create_acknowledge_popup("The physical task was stopped early by user.")

    def start_cognitive_task(self):
        cognitive_task_functions.BigBrainTime.start_cognitive_task("v", self.path)

    def stop_cognitive_task(self, killFlag):
        if(killFlag == -1):
            #print("Whoopsie!")
            pass
        #print("Pew pew!")


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(340, 700)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMaximumSize(QtCore.QSize(16777215, 550))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.frame = QtWidgets.QFrame(self.tab_3)
        self.frame.setGeometry(QtCore.QRect(9, 9, 291, 212))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.splash_text_browser = QtWidgets.QTextBrowser(self.frame)
        self.splash_text_browser.setObjectName("splash_text_browser")
        self.gridLayout_5.addWidget(self.splash_text_browser, 0, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox.setGeometry(QtCore.QRect(10, 220, 291, 290))
        self.groupBox.setObjectName("groupBox")
        self.mic1_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic1_checkbox.setGeometry(QtCore.QRect(40, 40, 92, 23))
        self.mic1_checkbox.setObjectName("mic1_checkbox")

        self.mic1_checkbox.stateChanged.connect(self.create_mic1_plot)

        self.mic2_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic2_checkbox.setGeometry(QtCore.QRect(40, 80, 92, 23))
        self.mic2_checkbox.setObjectName("mic2_checkbox")

        self.mic2_checkbox.stateChanged.connect(self.create_mic2_plot)

        self.mic3_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic3_checkbox.setGeometry(QtCore.QRect(40, 120, 92, 23))
        self.mic3_checkbox.setObjectName("mic3_checkbox")

        self.mic3_checkbox.stateChanged.connect(self.create_mic3_plot)

        self.mic4_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.mic4_checkbox.setGeometry(QtCore.QRect(40, 160, 92, 23))
        self.mic4_checkbox.setObjectName("mic4_checkbox")

        self.mic4_checkbox.stateChanged.connect(self.create_mic4_plot)

        self.o2sat_r_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.o2sat_r_checkbox.setGeometry(QtCore.QRect(160, 130, 92, 23))
        self.o2sat_r_checkbox.setObjectName("o2sat_r_checkbox")

        self.o2sat_r_checkbox.stateChanged.connect(self.create_o2sat_r_plot)

        self.ecg_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.ecg_checkbox.setGeometry(QtCore.QRect(160, 100, 92, 23))
        self.ecg_checkbox.setObjectName("ecg_checkbox")

        self.ecg_checkbox.stateChanged.connect(self.create_ecg_plot)

        self.gsr_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.gsr_checkbox.setGeometry(QtCore.QRect(160, 70, 110, 23))
        self.gsr_checkbox.setObjectName("gsr_checkbox")

        self.gsr_checkbox.stateChanged.connect(self.create_gsr_plot)

        self.breath_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.breath_checkbox.setGeometry(QtCore.QRect(160, 40, 92, 23))
        self.breath_checkbox.setObjectName("breath_checkbox")

        self.breath_checkbox.stateChanged.connect(self.create_breath_plot)

        self.subject_spinbox = QtWidgets.QSpinBox(self.groupBox)
        self.subject_spinbox.setGeometry(QtCore.QRect(20, 230, 44, 26))
        self.subject_spinbox.setObjectName("subject_spinbox")
        self.session_spinbox = QtWidgets.QSpinBox(self.groupBox)
        self.session_spinbox.setGeometry(QtCore.QRect(20, 260, 44, 26))
        self.session_spinbox.setObjectName("session_spinbox")
        self.subject_label = QtWidgets.QLabel(self.groupBox)
        self.subject_label.setGeometry(QtCore.QRect(70, 230, 120, 20))
        self.subject_label.setObjectName("subject_label")
        self.session_label = QtWidgets.QLabel(self.groupBox)
        self.session_label.setGeometry(QtCore.QRect(70, 260, 120, 20))
        self.session_label.setObjectName("session_label")
        self.update_session_number = QtWidgets.QPushButton(self.groupBox)
        self.update_session_number.setGeometry(QtCore.QRect(190, 230, 90, 50))
        self.update_session_number.setObjectName("update_session_number")

        self.update_session_number.clicked.connect(self.update_subject_details)

        self.o2sat_ir_checkbox_2 = QtWidgets.QCheckBox(self.groupBox)
        self.o2sat_ir_checkbox_2.setGeometry(QtCore.QRect(160, 160, 92, 23))
        self.o2sat_ir_checkbox_2.setObjectName("o2sat_ir_checkbox_2")

        self.o2sat_ir_checkbox_2.stateChanged.connect(self.create_o2sat_ir_plot)

        self.tabWidget.addTab(self.tab_3, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.frame_2 = QtWidgets.QFrame(self.tab)
        self.frame_2.setGeometry(QtCore.QRect(10, 10, 291, 330))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.physical_text_browser = QtWidgets.QTextBrowser(self.frame_2)
        self.physical_text_browser.setObjectName("physical_text_browser")
        self.gridLayout_6.addWidget(self.physical_text_browser, 0, 0, 1, 1)
        self.physical_task_start = QtWidgets.QPushButton(self.tab)
        self.physical_task_start.setGeometry(QtCore.QRect(10, 350, 291, 70))
        self.physical_task_start.setObjectName("physical_task_start")

        self.physical_task_start.clicked.connect(self.start_physical_tasks)

        self.physical_task_stop = QtWidgets.QPushButton(self.tab)
        self.physical_task_stop.setGeometry(QtCore.QRect(10, 440, 291, 70))
        self.physical_task_stop.setObjectName("physical_task_stop")

        self.physical_task_stop.clicked.connect(self.stop_physical_task)

        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.frame_3 = QtWidgets.QFrame(self.tab_2)
        self.frame_3.setGeometry(QtCore.QRect(10, 10, 291, 330))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.cognitive_textBrowser = QtWidgets.QTextBrowser(self.frame_3)
        self.cognitive_textBrowser.setObjectName("cognitive_textBrowser")
        self.gridLayout_7.addWidget(self.cognitive_textBrowser, 0, 0, 1, 1)
        self.cognitive_task_start = QtWidgets.QPushButton(self.tab_2)
        self.cognitive_task_start.setGeometry(QtCore.QRect(10, 350, 291, 70))
        self.cognitive_task_start.setObjectName("cognitive_task_start")

        self.cognitive_task_start.clicked.connect(self.start_cognitive_task)

        self.cognitive_task_stop = QtWidgets.QPushButton(self.tab_2)
        self.cognitive_task_stop.setGeometry(QtCore.QRect(10, 440, 291, 70))
        self.cognitive_task_stop.setObjectName("cognitive_task_stop")

        self.cognitive_task_stop.clicked.connect(self.stop_cognitive_task)

        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout.addWidget(self.tabWidget)
        self.groupbox_fatigue_indicators = QtWidgets.QGroupBox(self.centralwidget)
        self.groupbox_fatigue_indicators.setObjectName("groupbox_fatigue_indicators")
        self.cognitive_fatigue_indicator = led_indicator.LedIndicator(self.groupbox_fatigue_indicators)
        self.cognitive_fatigue_indicator.setGeometry(QtCore.QRect(70, 30, 20, 30))
        self.cognitive_fatigue_indicator.setText("")
        self.cognitive_fatigue_indicator.setObjectName("cognitive_fatigue_indicator")
        self.physical_fatigue_indicator = led_indicator.LedIndicator(self.groupbox_fatigue_indicators)
        self.physical_fatigue_indicator.setGeometry(QtCore.QRect(200, 30, 20, 30))
        self.physical_fatigue_indicator.setText("")
        self.physical_fatigue_indicator.setObjectName("physical_fatigue_indicator")
        self.cognitive_fatigue_label = QtWidgets.QLabel(self.groupbox_fatigue_indicators)
        self.cognitive_fatigue_label.setGeometry(QtCore.QRect(50, 60, 67, 20))
        self.cognitive_fatigue_label.setObjectName("cognitive_fatigue_label")
        self.physical_fatigue_label = QtWidgets.QLabel(self.groupbox_fatigue_indicators)
        self.physical_fatigue_label.setGeometry(QtCore.QRect(190, 60, 67, 20))
        self.physical_fatigue_label.setObjectName("physical_fatigue_label")
        self.verticalLayout.addWidget(self.groupbox_fatigue_indicators)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.splash_text_browser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Welcome to the COPD Framework Graphical User Interface!</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Please be sure to update your subject number and session number in the spin boxes below.</span></p></body></html>"))
        self.groupBox.setTitle(_translate("MainWindow", "Sensor Controls"))
        self.mic1_checkbox.setText(_translate("MainWindow", "Mic 1"))
        self.mic2_checkbox.setText(_translate("MainWindow", "Mic 2"))
        self.mic3_checkbox.setText(_translate("MainWindow", "Mic 3"))
        self.mic4_checkbox.setText(_translate("MainWindow", "Mic 4"))
        self.o2sat_r_checkbox.setText(_translate("MainWindow", "O2-Sat_R"))
        self.ecg_checkbox.setText(_translate("MainWindow", "ECG"))
        self.gsr_checkbox.setText(_translate("MainWindow", "GSR"))
        self.breath_checkbox.setText(_translate("MainWindow", "Breath"))
        self.subject_label.setText(_translate("MainWindow", "Subject Number"))
        self.session_label.setText(_translate("MainWindow", "Session Number"))
        self.update_session_number.setText(_translate("MainWindow", "Update"))
        self.o2sat_ir_checkbox_2.setText(_translate("MainWindow", "O2-Sat_IR"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Splash"))
        self.physical_text_browser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The physical task will begin with a baseline reading for 1.5 minutes. <br /><br />Next, the treadmill will be started at an initial incline and speed for 3 minutes. </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Next, the incline and speed will be increased to a higher difficulty for 3 additional minutes.<br /><br />Finally, a post reading will be taken.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Press the &quot;Start!&quot; button to begin. Popup windows will appear to prompt each phase of the task.</p></body></html>"))
        self.physical_task_start.setText(_translate("MainWindow", "Start"))
        self.physical_task_stop.setText(_translate("MainWindow", "Stop"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Physcial Tasks"))
        self.cognitive_textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; vertical-align:sub;\">Cognitive tasks will consist of several n-back challenges. Please set the values according to the following schema:<br /><br />If this is your first session, you will complete two 0-back challenges before the physical task. After the physical task, you will complete 6 2-back challenges. </span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt; vertical-align:sub;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; vertical-align:sub;\">Please set the n-back spinbox to either 0 or 2 according to the above.<br />Please also update the challenge number spinbox for each challenge you undertake.</span></p></body></html>"))
        self.cognitive_task_start.setText(_translate("MainWindow", "Start"))
        self.cognitive_task_stop.setText(_translate("MainWindow", "Stop"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Cognitive Tasks"))
        self.groupbox_fatigue_indicators.setTitle(_translate("MainWindow", "Fatigue Indicators"))
        self.cognitive_fatigue_label.setText(_translate("MainWindow", "Cognitive"))
        self.physical_fatigue_label.setText(_translate("MainWindow", "Physical"))
        self.actionClose.setText(_translate("MainWindow", "Close"))




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Window()
    ui.main_window.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
